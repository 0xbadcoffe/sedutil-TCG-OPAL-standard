#!/bin/sh
# Build a custom UEFI linux based PBA image

set -xe

## User configuration #########################################################
BOOTLOADER_DIR=EFI/Microsoft/Boot
BOOTLOADER_FILE=bootmgfw.efi
#BOOTLOADER_DIR=EFI/boot

## Internal configuration #####################################################
. ./conf
VERSIONINFO=$(git describe --dirty || echo tarball)
BUILDTYPE=UEFI64
BUILDIMG=${BUILDTYPE}-${VERSIONINFO}.img
IMAGE_DIR=$BUILDTYPE/image
TARGET_DIR=$IMAGE_DIR/$BOOTLOADER_DIR

EFI_FILE="scratch/${SYSLINUX}/efi64/efi/syslinux.efi"
IMAGE_FILES="scratch/${SYSLINUX}/efi64/com32/elflink/ldlinux/ldlinux.e64
    scratch/buildroot/64bit/images/bzImage
    scratch/buildroot/64bit/images/rootfs.cpio.xz
    scratch/buildroot/64bit/target/sbin/linuxpba
    scratch/buildroot/64bit/target/sbin/sedutil-cli
    buildroot/syslinux.cfg"

## Exit handlers ##############################################################
rm_temporaries() {
    rm -rf -- "$BUILDTYPE" "$BUILDIMG"
}

detach_lo_device() {
    sudo losetup --detach "$LOOPDEV"
}

unmount_image() {
    sudo umount -- "$IMAGE_DIR"
}

## Main #######################################################################
check_availability() {
    for f in $EFI_FILE $IMAGE_FILES; do
        if [ ! -f "$f" ]; then
            echo " prereqs are not available "
            exit 1
        fi
    done
}

create_image() {
    mkdir -- "$BUILDTYPE"
    trap 'rm_temporaries' EXIT
    truncate -s32M "$BUILDIMG"
    sgdisk -n0:0:0 -t0:ef00 "$BUILDIMG"
    LOOPDEV=$(sudo losetup --partscan --show --find "$BUILDIMG")
    trap 'detach_lo_device; rm_temporaries' EXIT
    sudo mkfs.vfat -n "$BUILDTYPE" -- "${LOOPDEV}p1"
    mkdir -- "$IMAGE_DIR"
    sudo mount -- "${LOOPDEV}p1" "$IMAGE_DIR"
    trap 'unmount_image; detach_lo_device; rm_temporaries' EXIT
    sudo install -D -- "$EFI_FILE" "${TARGET_DIR}/$BOOTLOADER_FILE"
    # shellcheck disable=SC2086
    sudo install -D -- $IMAGE_FILES "$TARGET_DIR"
    gzip "$BUILDIMG"
}

main() {
    check_availability
    create_image
}

main
