#!/bin/bash
# Build a custom UEFI linux based PBA image

set -xe

## define releases for tools
. conf
VERSIONINFO=$(git describe --dirty || echo tarball)
BUILDTYPE=UEFI64
BUILDIMG=${BUILDTYPE}-${VERSIONINFO}.img

## check that everything is available
EFI_FILE="scratch/${SYSLINUX}/efi64/efi/syslinux.efi"
IMAGE_FILES="scratch/${SYSLINUX}/efi64/com32/elflink/ldlinux/ldlinux.e64
    scratch/buildroot/64bit/images/bzImage
    scratch/buildroot/64bit/images/rootfs.cpio.xz
    scratch/buildroot/64bit/target/sbin/linuxpba
    scratch/buildroot/64bit/target/sbin/sedutil-cli
    buildroot/syslinux.cfg"
for f in $EFI_FILE $IMAGE_FILES; do
    if [ ! -f "$f" ]; then
        echo " prereqs are not available "
        exit 1
    fi
done

# Start fresh
rm -rf ${BUILDTYPE} ; mkdir ${BUILDTYPE} ; cd ${BUILDTYPE} || exit 1

# make an image file
truncate -s32M "$BUILDIMG"
sgdisk -n0:0:0 -t0:ef00 "$BUILDIMG"
LOOPDEV=$(sudo losetup --partscan --show -f "$BUILDIMG")
trap 'sudo losetup -d $LOOPDEV' EXIT
sudo mkfs.vfat "${LOOPDEV}p1" -n ${BUILDTYPE}
mkdir image
sudo mount "${LOOPDEV}p1" image
trap 'sudo umount image; sudo losetup -d $LOOPDEV' EXIT
sudo mkdir -p image/EFI/boot
sudo cp ../scratch/${SYSLINUX}/efi64/efi/syslinux.efi image/EFI/boot/bootx64.efi
sudo cp ../scratch/${SYSLINUX}/efi64/com32/elflink/ldlinux/ldlinux.e64 image/EFI/boot/
sudo cp ../scratch/buildroot/64bit/images/bzImage image/EFI/boot/
sudo cp ../scratch/buildroot/64bit/images/rootfs.cpio.xz image/EFI/boot/
sudo cp ../buildroot/syslinux.cfg image/EFI/boot/
gzip "$BUILDIMG"
