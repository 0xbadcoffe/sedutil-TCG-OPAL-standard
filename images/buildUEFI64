#!/bin/sh
# Build a custom UEFI linux based PBA image

set -xe

# user configuration
BOOTLOADER_DIR=EFI/Microsoft/Boot
#BOOTLOADER_DIR=EFI/boot

## define releases for tools
. ./conf
VERSIONINFO=$(git describe --dirty || echo tarball)
BUILDTYPE=UEFI64
BUILDIMG=$BUILDTYPE/${BUILDTYPE}-${VERSIONINFO}.img
IMAGE_DIR=$BUILDTYPE/image
TARGET_DIR=$IMAGE_DIR/$BOOTLOADER_DIR

## check that everything is available
EFI_FILE="scratch/${SYSLINUX}/efi64/efi/syslinux.efi"
IMAGE_FILES="scratch/${SYSLINUX}/efi64/com32/elflink/ldlinux/ldlinux.e64
    scratch/buildroot/64bit/images/bzImage
    scratch/buildroot/64bit/images/rootfs.cpio.xz
    scratch/buildroot/64bit/target/sbin/linuxpba
    scratch/buildroot/64bit/target/sbin/sedutil-cli
    buildroot/syslinux.cfg"
for f in $EFI_FILE $IMAGE_FILES; do
    if [ ! -f "$f" ]; then
        echo " prereqs are not available "
        exit 1
    fi
done

# Start fresh
rm -rf -- "${BUILDTYPE}"
mkdir -- "${BUILDTYPE}"

# make an image file
truncate -s32M "$BUILDIMG"
sgdisk -n0:0:0 -t0:ef00 "$BUILDIMG"
LOOPDEV=$(sudo losetup --partscan --show --find "$BUILDIMG")
trap 'sudo losetup -d $LOOPDEV' EXIT
sudo mkfs.vfat "${LOOPDEV}p1" -n ${BUILDTYPE}
mkdir -- "$IMAGE_DIR"
sudo mount "${LOOPDEV}p1" "$IMAGE_DIR"
trap 'sudo umount ${BUILDTYPE}/image; sudo losetup -d $LOOPDEV' EXIT
sudo mkdir -p -- "$TARGET_DIR"
sudo cp "$EFI_FILE" "${TARGET_DIR}/bootx64.efi"
# shellcheck disable=SC2086
sudo cp -- $IMAGE_FILES "$TARGET_DIR"
gzip "$BUILDIMG"
