FAIL:// reset the protocol stack
	//uint8_t protocolReset[] = {
	//	0x10, 0x00, 0x00, 0x00,
	//	0x00, 0x00, 0x00, 0x00,
	//};
	//memcpy(resp, protocolReset,8);
	//device->SendCmd(IF_SEND, 0x02, 0x1000, resp, 512);
	//memset(resp, 0, IO_BUFFER_LENGTH);
	//Sleep(250);
	//device->SendCmd(IF_RECV, 0x02, 0x1000, resp, 512);
	//HexDump(resp, 16);
	
GOOD//	 get a commid  == should fail because the TPer doesnt support comID management
        memset(resp, 0, IO_BUFFER_LENGTH);
	device->SendCmd(IF_RECV, 0x00, 0x0000, resp, 512);
        printf("\n Get ComID response\n");
	HexDump(resp, 512);
//	return 0;
FAIL//TPer reset 
	//device->SendCmd(IF_SEND, 0x02, 0x0004, resp, 512);
	//HexDump(resp, 16);
//	return 0;
//	 DiskList *dList = new DiskList();
	 //return 0;
FAIL// properties
//
// session[0:0] -> SMUID.Properties[ HostProperties = ["MaxComPacketSize" = 4096, 
// "MaxResponseComPacketSize" = 4096, "MaxPacketSize" = 4076,
// "MaxIndTokenSize" = 4040, "MaxPackets" = 1, "MaxSubpackets" = 1,
// "MaxMethods" = 1] ]
         
	//  0000 00000000 07FE0000 00000000 00000000
	//	0010 000000D0 00000000 00000000 00000000
	//	0020 00000000 00000000 000000B8 00000000
	//	0030 00000000 000000AB F8A80000 00000000
	//	0040 00FFA800 00000000 00FF01F0 F200F0F2
	//	0050 D0104D61 78436F6D 5061636B 65745369
	//	0060 7A658210 00F3F2D0 184D6178 52657370
	//	0070 6F6E7365 436F6D50 61636B65 7453697A
	//	0080 65821000 F3F2AD4D 61785061 636B6574
	//	0090 53697A65 820FECF3 F2AF4D61 78496E64
	//	00A0 546F6B65 6E53697A 65820FC8 F3F2AA4D
	//	00B0 61785061 636B6574 7301F3F2 AD4D6178
	//	00C0 53756270 61636B65 747301F3 F2AA4D61
	//	00D0 784D6574 686F6473 01F3F1F3 F1F9F000
	//	00E0 0000F100 00000000 00000000 00000000
//	TCGCommand *cmd = new TCGCommand(0x10000000, TCG_USER::SMUID, TCG_METHOD::PROPERTIES);
//	cmd->addToken(TCG_TOKEN::STARTLIST);	// [  (Open Bracket)
//	cmd->addToken(TCG_TOKEN::STARTNAME);	// 
//	cmd->addToken(TCG_NAME::HOSTPROPERTIES);
//	//cmd->addToken("HostProperties");
//	cmd->addToken(TCG_TOKEN::STARTLIST);	// [  (Open Bracket)
//	cmd->addToken(TCG_TOKEN::STARTNAME);
//	cmd->addToken("MaxComPacketSize");
//	cmd->addToken((uint16_t) 4096);
//	cmd->addToken(TCG_TOKEN::ENDNAME);
//	cmd->addToken(TCG_TOKEN::STARTNAME);
//	cmd->addToken("MaxResponseComPacketSize");
//	cmd->addToken((uint16_t)4096);
//	cmd->addToken(TCG_TOKEN::ENDNAME);
//	cmd->addToken(TCG_TOKEN::STARTNAME);
//	cmd->addToken("MaxPacketSize");
//	cmd->addToken((uint16_t)4076);
//	cmd->addToken(TCG_TOKEN::ENDNAME);
//	cmd->addToken(TCG_TOKEN::STARTNAME);
//	cmd->addToken("MaxIndTokenSize");
//	cmd->addToken((uint16_t)4040);
//	cmd->addToken(TCG_TOKEN::ENDNAME);
//	cmd->addToken(TCG_TOKEN::STARTNAME);
//	cmd->addToken("MaxPackets");
//	cmd->addToken(TCG_TINY_ATOM::uINT01);
//	cmd->addToken(TCG_TOKEN::ENDNAME);
//	cmd->addToken(TCG_TOKEN::STARTNAME);
//	cmd->addToken("MaxSubpackets");
//	cmd->addToken(TCG_TINY_ATOM::uINT01);
//	cmd->addToken(TCG_TOKEN::ENDNAME);
//	cmd->addToken(TCG_TOKEN::STARTNAME);
//	cmd->addToken("MaxMethods");
//	cmd->addToken(TCG_TINY_ATOM::uINT01);
//	cmd->addToken(TCG_TOKEN::ENDNAME);
//	cmd->addToken(TCG_TOKEN::ENDLIST);	// ]  (Close Bracket)
//	cmd->addToken(TCG_TOKEN::ENDNAME);	// 
//	cmd->addToken(TCG_TOKEN::ENDLIST);	// ]  (Close Bracket)
//	cmd->complete();
//	cmd->dump();  // have a look see
//	cmd->setProtocol(0x00);
//	int rc = cmd->execute(device, resp);
//	HexDump(resp, 512);